{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\n \nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n  },\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      const isLoggedIn = !!auth?.user;\n      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');\n      if (isOnDashboard) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      } else if (isLoggedIn) {\n        return Response.redirect(new URL('/dashboard', nextUrl));\n      }\n      return true;\n    },\n  },\n  providers: [], // Add providers with an empty array for now\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAClD,IAAI,eAAe;gBACjB,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D,OAAO,IAAI,YAAY;gBACrB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YACjD;YACA,OAAO;QACT;IACF;IACA,WAAW,EAAE;AACf"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\nimport GitHubProvider from 'next-auth/providers/github';\nimport { authConfig } from './auth.config';\nimport { z } from 'zod';\nimport { sql } from '@vercel/postgres';\nimport type { User } from '@/app/lib/definitions';\n\n \nasync function getUser(email: string): Promise<User | undefined> {\n  try {\n    const user = await sql<User>`SELECT * FROM users WHERE email=${email}`;\n    return user.rows[0];\n  } catch (error) {\n    console.error('Failed to fetch user:', error);\n    throw new Error('Failed to fetch user.');\n  }\n}\n \nexport const { auth, signIn, signOut } = NextAuth({\n  ...authConfig,\n  providers: [\n    GitHubProvider({\n      clientId: process.env.GITHUB_ID!,\n      clientSecret: process.env.GITHUB_SECRET!,\n    }),\n    Credentials({\n      async authorize(credentials) {\n        const parsedCredentials = z\n          .object({ email: z.string().email(), password: z.string().min(6) })\n          .safeParse(credentials);\n \n        if (parsedCredentials.success) {\n          const { email, password } = parsedCredentials.data;\n          const user = await getUser(email);\n          if (password === user?.password) return user;\n          if (!user) return null;\n        }\n \n        return null;\n      },\n    }),\n  ],\n});"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AALA;AAEA;AADA;AAGA;AACA;;;;;;;AAIA,eAAe,QAAQ,KAAa;IAClC,IAAI;QACF,MAAM,OAAO,MAAM,oPAAA,CAAA,MAAG,AAAM,CAAC,gCAAgC,EAAE,MAAM,CAAC;QACtE,OAAO,KAAK,IAAI,CAAC,EAAE;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uSAAA,CAAA,UAAQ,AAAD,EAAE;IAChD,GAAG,gHAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,mNAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;QACA,CAAA,GAAA,wNAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM,WAAU,WAAW;gBACzB,MAAM,oBAAoB,uLAAA,CAAA,IAAC,CACxB,MAAM,CAAC;oBAAE,OAAO,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;oBAAI,UAAU,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAG,GAChE,SAAS,CAAC;gBAEb,IAAI,kBAAkB,OAAO,EAAE;oBAC7B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,kBAAkB,IAAI;oBAClD,MAAM,OAAO,MAAM,QAAQ;oBAC3B,IAAI,aAAa,MAAM,UAAU,OAAO;oBACxC,IAAI,CAAC,MAAM,OAAO;gBACpB;gBAEA,OAAO;YACT;QACF;KACD;AACH"}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/auth/providers/route.ts"],"sourcesContent":["import { getProviders } from 'next-auth/react';\nimport { NextResponse } from 'next/server';\n\nexport async function GET() {\n  try {\n    const providers = await getProviders();\n    // 只返回需要的数据\n    const simplifiedProviders = Object.entries(providers || {}).map(([key, value]) => ({\n      id: key,\n      name: value.name,\n      type: value.type,\n    }));\n    \n    return NextResponse.json(simplifiedProviders);\n  } catch (error) {\n    console.error('Failed to get providers:', error);\n    return NextResponse.json({ error: 'Failed to get providers' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,YAAY,MAAM,CAAA,GAAA,uRAAA,CAAA,eAAY,AAAD;QACnC,WAAW;QACX,MAAM,sBAAsB,OAAO,OAAO,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,GAAK,CAAC;gBACjF,IAAI;gBACJ,MAAM,MAAM,IAAI;gBAChB,MAAM,MAAM,IAAI;YAClB,CAAC;QAED,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}