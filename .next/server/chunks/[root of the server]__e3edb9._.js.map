{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/invoices/route.ts"],"sourcesContent":["import { sql } from '@vercel/postgres';\nimport { NextResponse } from 'next/server';\nimport { z } from 'zod';\n\n// 定义请求体的验证模式\nconst InvoiceSchema = z.object({\n  customerId: z.string().min(1, '客户ID是必需的'),\n  amount: z.number().positive('金额必须大于0'),\n  status: z.enum(['pending', 'paid'], {\n    invalid_type_error: '状态必须是 pending 或 paid',\n  }),\n});\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    // 验证请求数据\n    const validatedData = InvoiceSchema.parse(body);\n    const { customerId, amount, status } = validatedData;\n    \n    // 转换金额为分\n    const amountInCents = amount * 100;\n    const date = new Date().toISOString().split('T')[0];\n\n    // 插入数据库\n    await sql`\n      INSERT INTO invoices (customer_id, amount, status, date)\n      VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n    `;\n\n    return NextResponse.json({ \n      success: true, \n      message: '发票创建成功' \n    });\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ \n        success: false, \n        error: error.errors \n      }, { status: 400 });\n    }\n\n    return NextResponse.json({ \n      success: false, \n      error: '创建发票失败' \n    }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AAFA;;;;AAIA,aAAa;AACb,MAAM,gBAAgB,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,YAAY,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,QAAQ,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,QAAQ,uLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAO,EAAE;QAClC,oBAAoB;IACtB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,SAAS;QACT,MAAM,gBAAgB,cAAc,KAAK,CAAC;QAC1C,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG;QAEvC,SAAS;QACT,MAAM,gBAAgB,SAAS;QAC/B,MAAM,OAAO,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QAEnD,QAAQ;QACR,MAAM,oPAAA,CAAA,MAAG,CAAC;;cAEA,EAAE,WAAW,EAAE,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK;IAC7D,CAAC;QAED,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,uLAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO,MAAM,MAAM;YACrB,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}